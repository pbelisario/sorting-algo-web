{"version":3,"sources":["sortingAlgoritms/quicksorter.js","sortingVizualizer/SortingVizualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getQuickSortAnimations","array","animations","length","quickSort","curIdx","endIdx","index","items","left","right","pivot","Math","floor","leftPointer","rightPointer","push","swap","partition","leftIndex","rightIndex","temp","SortingVizualizer","props","state","this","resetArray","min","max","i","random","setState","arrayElements","document","getElementsByClassName","elementOneIdx","elementTwoIdx","elementOneStyle","style","elementTwoStyle","setTimeout","backgroundColor","height","className","map","value","key","onClick","quicksort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bdaa910e.chunk.js","sourcesContent":["export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSort(array, 0, array.length - 1, animations)\r\n    return {array, animations}\r\n}\r\n\r\nfunction quickSort(array, curIdx, endIdx, animations) {\r\n    var index;\r\n    if (array.length > 1) {\r\n        index = partition(array, curIdx, endIdx, animations)\r\n        if (curIdx < index - 1) {\r\n            quickSort(array, curIdx, index-1, animations);\r\n        }\r\n        if (index < endIdx){\r\n            quickSort(array, index, endIdx, animations)\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right, animations) {\r\n    var pivot = items[Math.floor((left+right)/2)], // Middle One\r\n        leftPointer = left,\r\n        rightPointer = right;\r\n    while(leftPointer <= rightPointer) {\r\n        while(items[leftPointer] < pivot) leftPointer++;\r\n        while(items[rightPointer] > pivot) rightPointer--\r\n        if (leftPointer <= rightPointer){\r\n            animations.push([rightPointer, leftPointer])\r\n            swap(items, leftPointer, rightPointer);\r\n            leftPointer++;\r\n            rightPointer--;\r\n        }\r\n    }\r\n    return leftPointer;\r\n}","import './SortingVizualizer.css'\r\n\r\nimport React from 'react'\r\nimport {getQuickSortAnimations} from '../sortingAlgoritms/quicksorter.js'\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nconst NUMBER_OF_SORTING_ELEMENTS = 210;\r\n\r\nconst PRIMARY_COLOR = '#6495ed'; // Cornflower blue\r\n\r\nconst SECONDARY_COLOR = '#ed6495'; // rgb(237,100,149)\r\n\r\nexport default class SortingVizualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = []\r\n        for (let i = 0; i < NUMBER_OF_SORTING_ELEMENTS; i++) {\r\n            array.push(randomIntBetweenRange(0, NUMBER_OF_SORTING_ELEMENTS));\r\n        }\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    quicksort() {\r\n        const {array, animations} = getQuickSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const [elementOneIdx, elementTwoIdx] = animations[i]\r\n            const elementOneStyle = arrayElements[elementOneIdx].style\r\n            const elementTwoStyle = arrayElements[elementTwoIdx].style;\r\n            setTimeout(() => {\r\n                elementOneStyle.backgroundColor = SECONDARY_COLOR;\r\n                elementTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n                elementOneStyle.height = `${elementOneIdx}px`\r\n                elementTwoStyle.height = `${elementTwoIdx}px`\r\n                setTimeout(() =>{\r\n                    elementOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    elementTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }, 5 * i * ANIMATION_SPEED_MS);\r\n            \r\n            \r\n        }\r\n        // isSortedAnimation(array, arrayElements)\r\n    }\r\n\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return (\r\n            <div className=\"array-area\">\r\n                { array.map((value, index) => (\r\n                    <div className=\"array-element\" \r\n                        key={index}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR, \r\n                            height: `${value}px`,\r\n                            }}>\r\n                        </div>\r\n                ))}\r\n\r\n                <button onClick={() => this.resetArray()}>Create a New Array</button>\r\n                <button onClick={() => this.quicksort()}>Quick Sort</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction  randomIntBetweenRange(min, max) {\r\n    return Math.floor(Math.random() * (min + max - 1) + min);\r\n}\r\n\r\nfunction isSortedAnimation(array, pageElements) {\r\n    for (let i = 0; i < array.length-1; i++){\r\n        if (array[i] <= array[i+1]){\r\n            const elementStyle = pageElements[i].style\r\n            setTimeout(() => {\r\n                elementStyle.backgroundColor = 'red';  \r\n                \r\n            }, 50 * i * ANIMATION_SPEED_MS);\r\n        }\r\n    }\r\n}","import './App.css';\n\nimport React from 'react';\nimport SortingVizualizer from './sortingVizualizer/SortingVizualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVizualizer></SortingVizualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}