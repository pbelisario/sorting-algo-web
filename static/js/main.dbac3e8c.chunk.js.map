{"version":3,"sources":["sortingAlgoritms/heapsorter.js","sortingAlgoritms/mergesorter.js","sortingAlgoritms/quicksorter.js","sortingVizualizer/SortingVizualizer.jsx","sortingAlgoritms/bubblesorter.js","sortingAlgoritms/countingsorter.js","App.js","serviceWorker.js","index.js"],"names":["arrayLen","getHeapSortAnimations","array","animations","length","i","Math","floor","maxHeap","push","swap","heapSortHelper","left","right","temp","max","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","startIndex","endIndex","pivot","middleIndex","k","j","doMerge","getQuickSortAnimations","quickSort","curIdx","endIdx","index","items","leftPointer","rightPointer","partition","leftIndex","rightIndex","SortingVizualizer","props","state","this","resetArray","possible","randomIntBetweenRange","includes","setState","arrayElements","document","getElementsByClassName","isColorChange","elementOneIdx","elementTwoIdx","undefined","console","log","elementOneStyle","style","elementTwoStyle","color","setTimeout","backgroundColor","height","tmp","bubbleSortHelper","getBubbleSortAnimations","min","z","count","countingSortHelper","getCountingSortAnimations","elementOne","elementTwo","elementStyle","className","map","value","key","onClick","mergeSort","bubbleSort","heapSort","countingSort","React","Component","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbac3e8c.chunk.js","sourcesContent":["export function getHeapSortAnimations(array) {\r\n    const animations = []\r\n    heapSortHelper(array, animations);\r\n    return animations;\r\n}\r\nlet arrayLen\r\n\r\nfunction heapSortHelper(array, animations) {\r\n    arrayLen = array.length;\r\n\r\n    for (let i = Math.floor(arrayLen/2); i >= 0; i--) {\r\n        maxHeap(array, i, animations);\r\n    }\r\n\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        animations.push([0, i]);\r\n        animations.push([0, i]);\r\n        animations.push([[0, i], [array[i], array[0]]]);\r\n        swap(array, 0, i);\r\n        arrayLen--\r\n        maxHeap(array, 0, animations);\r\n    }\r\n}\r\n\r\nfunction swap(array, left, right) {\r\n    const temp = array[left];\r\n    array[left] = array[right];\r\n    array[right] = temp;\r\n}\r\n\r\nfunction maxHeap(array, i, animations) {\r\n    const left = 2 * i + 1;\r\n    const right = 2 * i + 2;\r\n    let max = i;\r\n\r\n    if (left < arrayLen && array[left] > array[max]) max = left;\r\n    if (right < arrayLen && array[right] > array[max]) max = right;\r\n    if (max !== i) {\r\n        animations.push([i, max]);\r\n        animations.push([i, max]);\r\n        animations.push([[i, max], [array[max], array[i]]]);\r\n        swap(array, i, max);\r\n        maxHeap(array, max, animations)\r\n    }\r\n}","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations)\r\n    return animations\r\n}\r\n\r\nfunction mergeSortHelper(array, startIndex, endIndex, auxiliaryArray, animations) {\r\n    if (startIndex === endIndex) return;\r\n    const pivot = Math.floor((startIndex+endIndex)/2);\r\n    mergeSortHelper(auxiliaryArray, startIndex, pivot, array, animations);\r\n    mergeSortHelper(auxiliaryArray, pivot+1, endIndex, array, animations);\r\n    doMerge(array, startIndex, pivot, endIndex, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(array, startIndex, middleIndex, endIndex, auxiliaryArray, animations) {\r\n    let k = startIndex;\r\n    let i = startIndex;\r\n    let j = middleIndex + 1;\r\n\r\n    while (i <= middleIndex && j <= endIndex) {\r\n        // Push the two numbers being compared\r\n        animations.push([i,j]);\r\n        animations.push([i,j]);\r\n        // Overwrite the value at the index k in the original array\r\n        // with the lower between the auxiliary Array at indexes i, j\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            array[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            array[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n\r\n    while (i <= middleIndex) {\r\n        // Push the two numbers being compared\r\n        animations.push([i,i]);\r\n        animations.push([i,i]);\r\n        // Overwrite the value at the index k in the original array\r\n        // with the value at index i in auxiliary array\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        array[k++] = auxiliaryArray[i++];\r\n    }\r\n\r\n    while (j <= endIndex) {\r\n        // Push the two numbers being compared\r\n        animations.push([j,j]);\r\n        animations.push([j,j]);\r\n        // Overwrite the value at the index k in the original array\r\n        // with the value at index j in auxiliary array\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        array[k++] = auxiliaryArray[j++];\r\n    }\r\n\r\n\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    quickSort(array, 0, array.length - 1, animations)\r\n    return animations\r\n}\r\n\r\nfunction quickSort(array, curIdx, endIdx, animations) {\r\n    var index;\r\n    if (array.length > 1) {\r\n        index = partition(array, curIdx, endIdx, animations)\r\n        if (curIdx < index - 1) {\r\n            quickSort(array, curIdx, index-1, animations);\r\n        }\r\n        if (index < endIdx){\r\n            quickSort(array, index, endIdx, animations)\r\n        }\r\n    }\r\n    return animations\r\n}\r\n\r\nfunction swap(items, leftIndex, rightIndex) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n}\r\n\r\nfunction partition(items, left, right, animations) {\r\n    var pivot = items[Math.floor((left+right)/2)], // Middle One\r\n        leftPointer = left,\r\n        rightPointer = right;\r\n    while(leftPointer <= rightPointer) {\r\n        while(items[leftPointer] < pivot) leftPointer++;\r\n        while(items[rightPointer] > pivot) rightPointer--\r\n        if (leftPointer <= rightPointer){\r\n            animations.push([leftPointer, rightPointer]);\r\n            animations.push([leftPointer, rightPointer]);\r\n            \r\n            animations.push([[leftPointer, rightPointer], [items[rightPointer],items[leftPointer]]])\r\n            swap(items, leftPointer, rightPointer);\r\n            leftPointer++;\r\n            rightPointer--;\r\n        }\r\n    }\r\n    return leftPointer;\r\n}","import './SortingVizualizer.css'\r\n\r\nimport React from 'react'\r\nimport {getBubbleSortAnimations} from '../sortingAlgoritms/bubblesorter.js'\r\nimport {getCountingSortAnimations} from '../sortingAlgoritms/countingsorter.js'\r\nimport {getHeapSortAnimations} from '../sortingAlgoritms/heapsorter.js'\r\nimport {getMergeSortAnimations} from '../sortingAlgoritms/mergesorter.js'\r\nimport {getQuickSortAnimations} from '../sortingAlgoritms/quicksorter.js'\r\n\r\nconst ANIMATION_SPEED_MS = 1;\r\n\r\nconst NUMBER_OF_SORTING_ELEMENTS = 210;\r\n\r\nconst PRIMARY_COLOR = '#6495ed'; // Cornflower blue\r\n\r\nconst SECONDARY_COLOR = '#ed6495'; // rgb(237,100,149)\r\n\r\nexport default class SortingVizualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray() {\r\n        const array = []\r\n        for (let i = 0; i < NUMBER_OF_SORTING_ELEMENTS; i++) {\r\n            let possible = randomIntBetweenRange(0, 2*NUMBER_OF_SORTING_ELEMENTS);\r\n            while(array.includes(possible)) possible = randomIntBetweenRange(0, 2*NUMBER_OF_SORTING_ELEMENTS);\r\n            array.push(possible);\r\n        }\r\n\r\n        this.setState({array});\r\n    }\r\n\r\n    quickSort() {\r\n        const animations = getQuickSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n\r\n            const isColorChange = i % 3 !== 2;\r\n            const [elementOneIdx, elementTwoIdx] = animations[i];\r\n            \r\n            if (isColorChange) {\r\n                if (elementOneIdx.length !== undefined) console.log(i, elementOneIdx, elementOneIdx.length)\r\n                const elementOneStyle = arrayElements[elementOneIdx].style;\r\n                const elementTwoStyle = arrayElements[elementTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = color;\r\n                    elementTwoStyle.backgroundColor = color;\r\n                }, 10 * i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const elementOneStyle = arrayElements[elementOneIdx[0]].style;\r\n                    const elementTwoStyle = arrayElements[elementOneIdx[1]].style;\r\n                    elementOneStyle.height = `${elementTwoIdx[0]}px`;\r\n                    elementTwoStyle.height = `${elementTwoIdx[1]}px`;\r\n                }, 10 * i * ANIMATION_SPEED_MS);\r\n                \r\n            }\r\n        }\r\n        \r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = i % 3 !== 2;\r\n            const [elementOneIdx, elementTwoIdx] = animations[i];\r\n            const elementOneStyle = arrayElements[elementOneIdx].style;\r\n            if (isColorChange) {\r\n                const elementTwoStyle = arrayElements[elementTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = color;\r\n                    elementTwoStyle.backgroundColor = color;\r\n                }, 5 *i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    elementOneStyle.height = `${elementTwoIdx}px`\r\n                }, 5* i * ANIMATION_SPEED_MS);\r\n            }\r\n        }\r\n    }\r\n\r\n    bubbleSort() {\r\n        const animations = getBubbleSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = i % 3 !== 2;\r\n            const [elementOneIdx, elementTwoIdx] = animations[i];\r\n            \r\n            if (isColorChange) {\r\n                if (elementOneIdx.length !== undefined) console.log(i, elementOneIdx, elementOneIdx.length)\r\n                const elementOneStyle = arrayElements[elementOneIdx].style;\r\n                const elementTwoStyle = arrayElements[elementTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = color;\r\n                    elementTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const elementOneStyle = arrayElements[elementOneIdx[0]].style;\r\n                    const elementTwoStyle = arrayElements[elementOneIdx[1]].style;\r\n                    elementOneStyle.height = `${elementTwoIdx[0]}px`;\r\n                    elementTwoStyle.height = `${elementTwoIdx[1]}px`;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                \r\n            }\r\n        }        \r\n    }\r\n\r\n    heapSort() {\r\n        const animations = getHeapSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = i % 3 !== 2;\r\n            const [elementOneIdx, elementTwoIdx] = animations[i];\r\n            \r\n            if (isColorChange) {\r\n                if (elementOneIdx.length !== undefined) console.log(i, elementOneIdx, elementOneIdx.length)\r\n                const elementOneStyle = arrayElements[elementOneIdx].style;\r\n                const elementTwoStyle = arrayElements[elementTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                    elementOneStyle.backgroundColor = color;\r\n                    elementTwoStyle.backgroundColor = color;\r\n                }, 5 *i * ANIMATION_SPEED_MS);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const elementOneStyle = arrayElements[elementOneIdx[0]].style;\r\n                    const elementTwoStyle = arrayElements[elementOneIdx[1]].style;\r\n                    elementOneStyle.height = `${elementTwoIdx[0]}px`;\r\n                    elementTwoStyle.height = `${elementTwoIdx[1]}px`;\r\n                }, 5 * i * ANIMATION_SPEED_MS);\r\n                \r\n            }\r\n        }        \r\n    }\r\n\r\n    countingSort() {\r\n        const animations = getCountingSortAnimations(this.state.array);\r\n        const arrayElements = document.getElementsByClassName('array-element');\r\n        for (let i = 0; i < animations.length; i++) {\r\n            \r\n            const [elementOne, elementTwo] = animations[i];\r\n            \r\n            if (elementOne.length !== 2) {\r\n                const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                const elementStyle = arrayElements[elementOne].style;\r\n                setTimeout(() => {\r\n                    elementStyle.backgroundColor = color;\r\n                    elementStyle.height = `${elementTwo}px`;\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } else {\r\n                setTimeout(() =>{\r\n                    const elementStyle = arrayElements[elementOne[0]].style\r\n                    elementStyle.height = `${elementOne[1]}px`;\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {array} = this.state;\r\n        return (\r\n            <div className=\"array-area\">\r\n                { array.map((value, index) => (\r\n                    <div className=\"array-element\" \r\n                        key={index}\r\n                        style={{\r\n                            backgroundColor: PRIMARY_COLOR, \r\n                            height: `${value}px`,\r\n                            }}>\r\n                        </div>\r\n                ))}\r\n\r\n                <button onClick={() => this.resetArray()}>Create a New Array</button>\r\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\r\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\r\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\r\n                <button onClick={() => this.countingSort()}>Counting Sort</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction  randomIntBetweenRange(min, max) {\r\n    return Math.floor(Math.random() * (min + max - 1) + min);\r\n}\r\n/*\r\nfunction checkSorted(array) {\r\n    for (let i = 0; i < array.length-1; i++) {\r\n        if (array[0] > array[i+1]) return false;\r\n    }\r\n    return true;\r\n}*/","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    \r\n    bubbleSortHelper(array, animations)\r\n    return animations\r\n}\r\n\r\nfunction bubbleSortHelper(array, animations) {\r\n    const arrayLen = array.length;\r\n    for (let i = 0; i < arrayLen; i++) {\r\n        for (let j = 0; j < arrayLen; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                animations.push([j, j+1]);\r\n                animations.push([j, j+1]);\r\n                animations.push([[j, j+1], [array[j+1], array[j]]]);\r\n                let tmp = array[j];\r\n                array[j] = array[j+1];\r\n                array[j+1] = tmp;\r\n            }\r\n        }\r\n    }\r\n}","export function getCountingSortAnimations(array) {\r\n    const animations = [];\r\n    countingSortHelper(array, Math.min(...array), Math.max(...array), animations);\r\n    return animations;\r\n}\r\n\r\nfunction countingSortHelper(array, min, max, animations) {\r\n\r\n    let z = 0;\r\n    const count = [];\r\n    \r\n    for (let i = min; i <= max; i++) {\r\n        if (i < array.length) {\r\n            animations.push([i, 0]);\r\n            animations.push([i, 0]);\r\n        }\r\n        count[i] = 0;\r\n    }\r\n\r\n    for(let i = 0; i < array.length; i++) {\r\n        animations[i][1]++;\r\n        animations.push([i, animations[i]]);\r\n        animations.push([i, animations[i]]);\r\n        count[array[i]]++;\r\n    }\r\n\r\n    for (let i  = min; i <= max; i++) {\r\n        while(count[i]-- > 0){\r\n            animations.push([[z, i], []]);\r\n            array[z++] = i\r\n        }\r\n    }\r\n    \r\n\r\n}","import './App.css';\n\nimport React from 'react';\nimport SortingVizualizer from './sortingVizualizer/SortingVizualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVizualizer></SortingVizualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}